MAIN: 
xx--Use Temporary allocator, free memory on every iteration of the loop
xx--Allow free-form expressions, so just e1 ^ e1 should return the result to the console
--Allow input to come from a file instead of stdin
  (if you allow a file then you want to run the loop for each of the lines in the file)

TESTS:
-- we are changing things and can't check whether we broke the tests or not!

LEXER:
xx--Convert number to K-Element with basis = 0
xx--How do we handle empty input in the buffer or zero tokens?
xx--Pass the one element symbols from the environment instead of caching them in the lexer
xx--Not handling the case of line numbers and characters in the input
--Error messages, add a 'error_detected' flag on the lexer and have that fill out a log

PARSER:
--Handle keywords, kind of skipping over them for now
xx--Revisit the use of t0,t1,t2; are they too simplistic? is the code hard to follow? (nope, pretty clean to me)
--ERROR HANDLING NEEDS REVISITED and thought out a lot better than it is now, it is janky and not helpful with simple mistakes.
// ; just crashes the program which is not ideal!
// thinking about augmenting the tokens with a category, separator, type
// so for things we have 
//   IDENTIFIER
//   KEYWORD
//   BASIS_ELEMENT
//   NUMBER
//   but then for the one-element symbols like ^ + or << we have that wrapped in the type with no 'value' even though we could
//   SEPARATOR
//   BINARY_OPERATOR
//   UNARY_OPERATOR
//    then the value in symbol or something like that t0.category == SEPARATOR and t0.op_symbol == .Operator_Symbol
//   you don't strictly need it but what does it buy you? that is the question, what is the specific problem i am having with
//   error handling at the moment

EVAL:
--Interior product, use regressive with comp of second arg
xx--Left and Right additive identity (0 + e1) does not resolve correctly (just worked, must have fixed in earlier change)
xx--Fix the bug in the regressive product (wrong argument from the environment)

ENVIRONMENT:
--Should we clear all symbols on an environment change? Yes we have to
--Don't handle changing dimensions gracefully
   If the dimension is less than the current but the symbols didn't change we don't have to do anything
   If the symbols changed then we have to regenerate the symbols
   If the dimension expands then we need to go through this whole process again because we introduced new one elements
   and everyone's index is hosed!!!
